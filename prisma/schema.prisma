// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// TMDB Image generation: https://image.tmdb.org/t/p/w500/jJXV3H1SAvQpjSTIKZBUyAGica3.jpg

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id       // Clerk ID
  username       String     @unique
  email          String     @unique
  profilePicture String?    @default("/noAvatar.png")
  bio            String?
  website        String?
  twitter        String?
  instagram      String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  comments       Comment[]
  reviews        Review[]
  favorites      Favorite[]

  @@index([username])
  @@index([email])
}

model Show {
  id              Int       @id @default(autoincrement())
  tmdbId          Int       @unique
  name            String
  overview        String?
  firstAirDate    DateTime?
  originCountry   String[]
  originalLanguage String 
  isCompetition   Boolean   @default(false)
  isRunning       Boolean   @default(false) 
  tagline         String?                  
  tmdbRating      Float?                
  networks        String[]                 
  posterPath      String?                  
  backdropPath    String?                  
  seasons         Season[]
  comments        Comment[]
  reviews         Review[]
  favorites       Favorite[]
}

model Season {
  id             Int       @id @default(autoincrement())
  seasonNumber   Int
  episodeCount   Int
  overview       String?
  airDate        DateTime?
  posterPath     String?
  showId         Int
  show           Show      @relation(fields: [showId], references: [id])
  tmdbRating     Float? 
  episodes       Episode[]
  characters     Character[]
  comments       Comment[]
  reviews        Review[]
  favorites      Favorite[]

  @@unique([showId, seasonNumber])
}

model Episode {
  id             Int       @id @default(autoincrement())
  seasonId       Int
  season         Season    @relation(fields: [seasonId], references: [id])
  episodeNumber  Int
  name           String
  overview       String?
  tmdbRating     Float? 
  airDate        DateTime?
  stillPath      String?
  comments       Comment[]
  reviews        Review[]
  favorites      Favorite[]

  @@unique([seasonId, episodeNumber])
}

model Character {
  id             Int       @id @default(autoincrement())
  seasonId       Int
  name           String
  characterName  String?
  season         Season    @relation(fields: [seasonId], references: [id])
  comments       Comment[]
}

model Comment {
  id           Int       @id @default(autoincrement())
  content      String
  spoiler      Boolean   @default(false)
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  showId       Int?      // Optional relation
  show         Show?     @relation(fields: [showId], references: [id])
  seasonId     Int?
  season       Season?   @relation(fields: [seasonId], references: [id])
  episodeId    Int?
  episode      Episode?  @relation(fields: [episodeId], references: [id])
  characterId  Int?
  character    Character?@relation(fields: [characterId], references: [id])
  createdAt    DateTime  @default(now())
}

model Review {
  id           Int       @id @default(autoincrement())
  rating       Float     // out of 5, allows quarter stars (e.g., 4.25)
  content      String
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  showId       Int?
  show         Show?     @relation(fields: [showId], references: [id])
  seasonId     Int?
  season       Season?   @relation(fields: [seasonId], references: [id])
  episodeId    Int?
  episode      Episode?  @relation(fields: [episodeId], references: [id])
  createdAt    DateTime  @default(now())
}

model Favorite {
  id           Int       @id @default(autoincrement())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  showId       Int?
  show         Show?     @relation(fields: [showId], references: [id])
  seasonId     Int?
  season       Season?   @relation(fields: [seasonId], references: [id])
  episodeId    Int?
  episode      Episode?  @relation(fields: [episodeId], references: [id])
  createdAt    DateTime  @default(now())
}
