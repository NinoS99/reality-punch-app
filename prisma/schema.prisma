generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id
  username       String          @unique
  email          String          @unique
  profilePicture String?         @default("/noAvatar.png")
  bio            String?
  createdAt      DateTime        @default(now())
  instagram      String?
  twitter        String?
  updatedAt      DateTime        @updatedAt
  comments       Comment[]
  commentVotes   CommentVote[]
  episodeReviews EpisodeReview[]
  favorites      Favorite[]
  likes          Like[]
  predictions    Prediction[]
  Rating         Rating[]
  reviews        Review[]
  reviewComments ReviewComment[]
  seasonReviews  SeasonReview[]
  showReviews    ShowReview[]
  views          View[]
  watched        Watched[]
  watchLists     WatchList[]
  watchListComments WatchListComment[]

  @@index([username])
  @@index([email])
}

model Show {
  id               Int               @id @default(autoincrement())
  tmdbId           Int               @unique
  name             String
  overview         String?
  firstAirDate     DateTime?
  originCountry    String[]
  isCompetition    Boolean           @default(false)
  backdropPath     String?
  isRunning        Boolean           @default(false)
  posterPath       String?
  tagline          String?
  tmdbRating       Float?
  originalLanguage String[]
  comments         Comment[]
  favorites        Favorite[]
  predictions      Prediction[]
  ratings          Rating[]
  reviews          Review[]
  seasons          Season[]
  creator          ShowCreator[]
  showReviews      ShowReview[]
  tags             ShowTag[]
  ShowsOnNetworks  ShowsOnNetworks[]
  views            View[]
  watched          Watched[]
  watchListShows   WatchListShow[]
}

model Season {
  id            Int            @id @default(autoincrement())
  seasonNumber  Int
  episodeCount  Int
  airDate       DateTime?
  showId        Int
  posterPath    String?
  tmdbRating    Float?
  overview      String?
  characters    Character[]
  comments      Comment[]
  episodes      Episode[]
  favorites     Favorite[]
  ratings       Rating[]
  reviews       Review[]
  show          Show           @relation(fields: [showId], references: [id])
  seasonReviews SeasonReview[]
  tags          SeasonTag[]
  views         View[]
  watched       Watched[]

  @@unique([showId, seasonNumber])
}

model Episode {
  id             Int             @id @default(autoincrement())
  seasonId       Int
  episodeNumber  Int
  name           String
  overview       String?
  airDate        DateTime?
  stillPath      String?
  tmdbRating     Float?
  comments       Comment[]
  season         Season          @relation(fields: [seasonId], references: [id])
  episodeReviews EpisodeReview[]
  tags           EpisodeTag[]
  favorites      Favorite[]
  predictions    Prediction[]
  ratings        Rating[]
  reviews        Review[]
  views          View[]
  watched        Watched[]

  @@unique([seasonId, episodeNumber])
}

model Person {
  id          Int         @id
  name        String
  profilePath String?
  characters  Character[]
}

model Character {
  id             Int                      @id @default(autoincrement())
  seasonId       Int
  personId       Int
  showRole       String?
  person         Person                   @relation(fields: [personId], references: [id])
  season         Season                   @relation(fields: [seasonId], references: [id])
  tags           CharacterTag[]
  comments       Comment[]
  episodeReviews EpisodeReviewCharacter[]
  favorites      Favorite[]
  predictions    Prediction[]
  seasonReviews  SeasonReviewCharacter[]
  showReviews    ShowReviewCharacter[]
  views          View[]
}

model Creator {
  id           Int           @id
  name         String
  originalName String        @map("original_name")
  profilePath  String?       @map("profile_path")
  shows        ShowCreator[]
}

model ShowCreator {
  showId    Int
  creatorId Int
  creator   Creator @relation(fields: [creatorId], references: [id])
  show      Show    @relation(fields: [showId], references: [id])

  @@id([showId, creatorId])
}

model Comment {
  id          Int           @id @default(autoincrement())
  content     String
  spoiler     Boolean       @default(false)
  userId      String
  showId      Int?
  seasonId    Int?
  episodeId   Int?
  characterId Int?
  createdAt   DateTime      @default(now())
  parentId    Int?
  character   Character?    @relation(fields: [characterId], references: [id])
  episode     Episode?      @relation(fields: [episodeId], references: [id])
  parent      Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]     @relation("CommentReplies")
  season      Season?       @relation(fields: [seasonId], references: [id])
  show        Show?         @relation(fields: [showId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  votes       CommentVote[]
  likes       Like[]
}

model CommentVote {
  id        Int     @id @default(autoincrement())
  commentId Int
  userId    String
  value     Int
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Float
  content   String
  userId    String
  showId    Int?
  seasonId  Int?
  episodeId Int?
  createdAt DateTime @default(now())
  spoiler   Boolean  @default(false)
  likes     Like[]
  episode   Episode? @relation(fields: [episodeId], references: [id])
  season    Season?  @relation(fields: [seasonId], references: [id])
  show      Show?    @relation(fields: [showId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  views     View[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    String
  rating    Float
  showId    Int?
  seasonId  Int?
  episodeId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  episode   Episode? @relation(fields: [episodeId], references: [id])
  season    Season?  @relation(fields: [seasonId], references: [id])
  show      Show?    @relation(fields: [showId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, showId])
  @@unique([userId, seasonId])
  @@unique([userId, episodeId])
}

model Favorite {
  id          Int        @id @default(autoincrement())
  userId      String
  showId      Int?
  seasonId    Int?
  episodeId   Int?
  createdAt   DateTime   @default(now())
  characterId Int?
  character   Character? @relation(fields: [characterId], references: [id])
  episode     Episode?   @relation(fields: [episodeId], references: [id])
  season      Season?    @relation(fields: [seasonId], references: [id])
  show        Show?      @relation(fields: [showId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model Watched {
  id        Int      @id @default(autoincrement())
  userId    String
  showId    Int?
  seasonId  Int?
  episodeId Int?
  createdAt DateTime @default(now())
  episode   Episode? @relation(fields: [episodeId], references: [id])
  season    Season?  @relation(fields: [seasonId], references: [id])
  show      Show?    @relation(fields: [showId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, showId])
  @@unique([userId, seasonId])
  @@unique([userId, episodeId])
}

model Tag {
  id             Int                @id @default(autoincrement())
  name           String             @unique
  characters     CharacterTag[]
  episodeReviews EpisodeReviewTag[]
  episodes       EpisodeTag[]
  seasonReviews  SeasonReviewTag[]
  seasons        SeasonTag[]
  showReviews    ShowReviewTag[]
  shows          ShowTag[]
  watchLists     WatchListTag[]
}

model ShowTag {
  id     Int  @id @default(autoincrement())
  showId Int
  tagId  Int
  show   Show @relation(fields: [showId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@unique([showId, tagId])
}

model SeasonTag {
  id       Int    @id @default(autoincrement())
  seasonId Int
  tagId    Int
  season   Season @relation(fields: [seasonId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@unique([seasonId, tagId])
}

model EpisodeTag {
  id        Int     @id @default(autoincrement())
  episodeId Int
  tagId     Int
  episode   Episode @relation(fields: [episodeId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@unique([episodeId, tagId])
}

model CharacterTag {
  id          Int       @id @default(autoincrement())
  characterId Int
  tagId       Int
  character   Character @relation(fields: [characterId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@unique([characterId, tagId])
}

model View {
  id              Int            @id @default(autoincrement())
  userId          String?
  showId          Int?
  seasonId        Int?
  episodeId       Int?
  reviewId        Int?
  characterId     Int?
  watchListId     Int?
  createdAt       DateTime       @default(now())
  episodeReviewId Int?
  seasonReviewId  Int?
  showReviewId    Int?
  character       Character?     @relation(fields: [characterId], references: [id])
  episode         Episode?       @relation(fields: [episodeId], references: [id])
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id])
  review          Review?        @relation(fields: [reviewId], references: [id])
  season          Season?        @relation(fields: [seasonId], references: [id])
  seasonReview    SeasonReview?  @relation(fields: [seasonReviewId], references: [id])
  show            Show?          @relation(fields: [showId], references: [id])
  showReview      ShowReview?    @relation(fields: [showReviewId], references: [id])
  watchList       WatchList?     @relation(fields: [watchListId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([showId])
  @@index([seasonId])
  @@index([episodeId])
  @@index([watchListId])
}

model Prediction {
  id             Int        @id @default(autoincrement())
  userId         String
  showId         Int
  episodeId      Int
  characterId    Int?
  predictionType String
  createdAt      DateTime   @default(now())
  likes          Like[]
  character      Character? @relation(fields: [characterId], references: [id])
  episode        Episode    @relation(fields: [episodeId], references: [id])
  show           Show       @relation(fields: [showId], references: [id])
  user           User       @relation(fields: [userId], references: [id])

  @@unique([userId, episodeId, predictionType])
}

model Network {
  id              Int               @id
  name            String
  logoPath        String?
  originCountry   String?
  homepage        String?
  ShowsOnNetworks ShowsOnNetworks[]
}

model ShowsOnNetworks {
  showId    Int
  networkId Int
  network   Network @relation(fields: [networkId], references: [id])
  show      Show    @relation(fields: [showId], references: [id])

  @@id([showId, networkId])
}

model ShowReview {
  id                  Int                   @id @default(autoincrement())
  content             String
  userId              String
  showId              Int
  startedOn           DateTime?
  endedOn             DateTime?
  spoiler             Boolean               @default(false)
  createdAt           DateTime              @default(now())
  likes               Like[]
  comments            ReviewComment[]
  show                Show                  @relation(fields: [showId], references: [id])
  user                User                  @relation(fields: [userId], references: [id])
  favouriteCharacters ShowReviewCharacter[]
  tags                ShowReviewTag[]
  views               View[]
}

model SeasonReview {
  id                  Int                     @id @default(autoincrement())
  content             String
  userId              String
  seasonId            Int
  startedOn           DateTime?
  endedOn             DateTime?
  spoiler             Boolean                 @default(false)
  createdAt           DateTime                @default(now())
  likes               Like[]
  comments            ReviewComment[]
  season              Season                  @relation(fields: [seasonId], references: [id])
  user                User                    @relation(fields: [userId], references: [id])
  favouriteCharacters SeasonReviewCharacter[]
  tags                SeasonReviewTag[]
  views               View[]
}

model EpisodeReview {
  id                  Int                      @id @default(autoincrement())
  content             String
  userId              String
  episodeId           Int
  watchedOn           DateTime?
  spoiler             Boolean                  @default(false)
  createdAt           DateTime                 @default(now())
  episode             Episode                  @relation(fields: [episodeId], references: [id])
  user                User                     @relation(fields: [userId], references: [id])
  favouriteCharacters EpisodeReviewCharacter[]
  tags                EpisodeReviewTag[]
  likes               Like[]
  comments            ReviewComment[]
  views               View[]
}

model ShowReviewCharacter {
  id           Int        @id @default(autoincrement())
  showReviewId Int
  characterId  Int
  character    Character  @relation(fields: [characterId], references: [id])
  showReview   ShowReview @relation(fields: [showReviewId], references: [id])

  @@unique([showReviewId, characterId])
}

model SeasonReviewCharacter {
  id             Int          @id @default(autoincrement())
  seasonReviewId Int
  characterId    Int
  character      Character    @relation(fields: [characterId], references: [id])
  seasonReview   SeasonReview @relation(fields: [seasonReviewId], references: [id])

  @@unique([seasonReviewId, characterId])
}

model EpisodeReviewCharacter {
  id              Int           @id @default(autoincrement())
  episodeReviewId Int
  characterId     Int
  character       Character     @relation(fields: [characterId], references: [id])
  episodeReview   EpisodeReview @relation(fields: [episodeReviewId], references: [id])

  @@unique([episodeReviewId, characterId])
}

model ShowReviewTag {
  id           Int        @id @default(autoincrement())
  showReviewId Int
  tagId        Int
  showReview   ShowReview @relation(fields: [showReviewId], references: [id])
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@unique([showReviewId, tagId])
}

model SeasonReviewTag {
  id             Int          @id @default(autoincrement())
  seasonReviewId Int
  tagId          Int
  seasonReview   SeasonReview @relation(fields: [seasonReviewId], references: [id])
  tag            Tag          @relation(fields: [tagId], references: [id])

  @@unique([seasonReviewId, tagId])
}

model EpisodeReviewTag {
  id              Int           @id @default(autoincrement())
  episodeReviewId Int
  tagId           Int
  episodeReview   EpisodeReview @relation(fields: [episodeReviewId], references: [id])
  tag             Tag           @relation(fields: [tagId], references: [id])

  @@unique([episodeReviewId, tagId])
}

model Like {
  id              Int            @id @default(autoincrement())
  userId          String
  commentId       Int?
  reviewId        Int?
  predictionId    Int?
  showReviewId    Int?
  seasonReviewId  Int?
  episodeReviewId Int?
  watchListId     Int?
  createdAt       DateTime       @default(now())
  comment         Comment?       @relation(fields: [commentId], references: [id])
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id])
  prediction      Prediction?    @relation(fields: [predictionId], references: [id])
  review          Review?        @relation(fields: [reviewId], references: [id])
  seasonReview    SeasonReview?  @relation(fields: [seasonReviewId], references: [id])
  showReview      ShowReview?    @relation(fields: [showReviewId], references: [id])
  watchList       WatchList?     @relation(fields: [watchListId], references: [id])
  user            User           @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
  @@unique([userId, reviewId])
  @@unique([userId, predictionId])
  @@unique([userId, showReviewId])
  @@unique([userId, seasonReviewId])
  @@unique([userId, episodeReviewId])
  @@unique([userId, watchListId])
}

model ReviewComment {
  id              Int            @id @default(autoincrement())
  content         String
  userId          String
  showReviewId    Int?
  seasonReviewId  Int?
  episodeReviewId Int?
  createdAt       DateTime       @default(now())
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id])
  seasonReview    SeasonReview?  @relation(fields: [seasonReviewId], references: [id])
  showReview      ShowReview?    @relation(fields: [showReviewId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
}

model WatchList {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  userId      String
  isPublic    Boolean           @default(true)
  friendsOnly Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
  shows       WatchListShow[]
  tags        WatchListTag[]
  comments    WatchListComment[]
  likes       Like[]
  views       View[]

  @@index([userId])
  @@index([isPublic])
  @@index([friendsOnly])
}

model WatchListShow {
  id          Int       @id @default(autoincrement())
  watchListId Int
  showId      Int
  ranking     Int?
  addedAt     DateTime  @default(now())
  watchList   WatchList @relation(fields: [watchListId], references: [id])
  show        Show      @relation(fields: [showId], references: [id])

  @@unique([watchListId, showId])
  @@index([watchListId, ranking])
}

model WatchListTag {
  id          Int       @id @default(autoincrement())
  watchListId Int
  tagId       Int
  watchList   WatchList @relation(fields: [watchListId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@unique([watchListId, tagId])
}

model WatchListComment {
  id          Int       @id @default(autoincrement())
  content     String
  userId      String
  watchListId Int
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  watchList   WatchList @relation(fields: [watchListId], references: [id])

  @@index([watchListId])
}
