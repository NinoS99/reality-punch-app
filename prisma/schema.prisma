generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id
  username       String          @unique
  email          String          @unique
  bio            String?
  createdAt      DateTime        @default(now())
  instagram      String?
  twitter        String?
  updatedAt      DateTime        @updatedAt

  episodeReviews EpisodeReview[]
  favorites      Favorite[]
  likes          Like[]
  predictions    Prediction[]
  Rating         Rating[]
  reviewComments ReviewComment[]
  seasonReviews  SeasonReview[]
  showReviews    ShowReview[]
  watched        Watched[]
  watchLists     WatchList[]
  watchListComments WatchListComment[]
  discussions    Discussion[]
  discussionComments DiscussionComment[]
  discussionCommentVotes DiscussionCommentVote[]
  reactions      Reaction[]
  pollVotes      PollVote[]

  @@index([username])
  @@index([email])
}

model Show {
  id               Int               @id @default(autoincrement())
  tmdbId           Int               @unique
  name             String
  overview         String?
  firstAirDate     DateTime?
  originCountry    String[]
  isCompetition    Boolean           @default(false)
  backdropPath     String?
  isRunning        Boolean           @default(false)
  posterPath       String?
  tagline          String?
  tmdbRating       Float?
  originalLanguage String[]

  favorites        Favorite[]
  predictions      Prediction[]
  ratings          Rating[]
  seasons          Season[]
  creator          ShowCreator[]
  showReviews      ShowReview[]

  ShowsOnNetworks  ShowsOnNetworks[]
  watched          Watched[]
  watchListShows   WatchListShow[]
  discussions      Discussion[]
}

model Season {
  id            Int            @id @default(autoincrement())
  seasonNumber  Int
  episodeCount  Int
  airDate       DateTime?
  showId        Int
  posterPath    String?
  tmdbRating    Float?
  overview      String?
  characters    Character[]

  episodes      Episode[]
  favorites     Favorite[]
  ratings       Rating[]
  show          Show           @relation(fields: [showId], references: [id])
  seasonReviews SeasonReview[]

  watched       Watched[]
  watchListShows WatchListShowSeason[]
  discussions   Discussion[]

  @@unique([showId, seasonNumber])
}

model Episode {
  id             Int             @id @default(autoincrement())
  seasonId       Int
  episodeNumber  Int
  name           String
  overview       String?
  airDate        DateTime?
  stillPath      String?
  tmdbRating     Float?

  season         Season          @relation(fields: [seasonId], references: [id])
  episodeReviews EpisodeReview[]

  favorites      Favorite[]
  predictions    Prediction[]
  ratings        Rating[]
  watched        Watched[]
  discussions    Discussion[]
  reactions      Reaction[]

  @@unique([seasonId, episodeNumber])
}

model Person {
  id          Int         @id
  name        String
  profilePath String?
  characters  Character[]
}

model Character {
  id             Int                      @id @default(autoincrement())
  seasonId       Int
  personId       Int
  showRole       String?
  person         Person                   @relation(fields: [personId], references: [id])
  season         Season                   @relation(fields: [seasonId], references: [id])
  tags           CharacterTag[]

  favorites      Favorite[]
  predictions    Prediction[]
  seasonReviews  SeasonReviewCharacter[]
  showReviews    ShowReviewCharacter[]
}

model Creator {
  id           Int           @id
  name         String
  originalName String        @map("original_name")
  profilePath  String?       @map("profile_path")
  shows        ShowCreator[]
}

model ShowCreator {
  showId    Int
  creatorId Int
  creator   Creator @relation(fields: [creatorId], references: [id])
  show      Show    @relation(fields: [showId], references: [id])

  @@id([showId, creatorId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    String
  rating    Float
  showId    Int?
  seasonId  Int?
  episodeId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  episode   Episode? @relation(fields: [episodeId], references: [id])
  season    Season?  @relation(fields: [seasonId], references: [id])
  show      Show?    @relation(fields: [showId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
  @@unique([userId, seasonId])
  @@unique([userId, episodeId])
}

model Favorite {
  id          Int        @id @default(autoincrement())
  userId      String
  showId      Int?
  seasonId    Int?
  episodeId   Int?
  createdAt   DateTime   @default(now())
  characterId Int?
  character   Character? @relation(fields: [characterId], references: [id])
  episode     Episode?   @relation(fields: [episodeId], references: [id])
  season      Season?    @relation(fields: [seasonId], references: [id])
  show        Show?      @relation(fields: [showId], references: [id])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Watched {
  id        Int      @id @default(autoincrement())
  userId    String
  showId    Int?
  seasonId  Int?
  episodeId Int?
  createdAt DateTime @default(now())
  episode   Episode? @relation(fields: [episodeId], references: [id])
  season    Season?  @relation(fields: [seasonId], references: [id])
  show      Show?    @relation(fields: [showId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
  @@unique([userId, seasonId])
  @@unique([userId, episodeId])
}

model Tag {
  id             Int                @id @default(autoincrement())
  name           String             @unique
  characters     CharacterTag[]
  episodeReviews EpisodeReviewTag[]

  seasonReviews  SeasonReviewTag[]
  showReviews    ShowReviewTag[]
  watchLists     WatchListTag[]
  discussions    DiscussionTag[]
}



model CharacterTag {
  id          Int       @id @default(autoincrement())
  characterId Int
  tagId       Int
  character   Character @relation(fields: [characterId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@unique([characterId, tagId])
}


model Prediction {
  id             Int        @id @default(autoincrement())
  userId         String
  showId         Int
  episodeId      Int
  characterId    Int?
  predictionType String
  createdAt      DateTime   @default(now())
  likes          Like[]
  character      Character? @relation(fields: [characterId], references: [id])
  episode        Episode    @relation(fields: [episodeId], references: [id])
  show           Show       @relation(fields: [showId], references: [id])
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, episodeId, predictionType])
}

model Network {
  id              Int               @id
  name            String
  logoPath        String?
  originCountry   String?
  homepage        String?
  ShowsOnNetworks ShowsOnNetworks[]
}

model ShowsOnNetworks {
  showId    Int
  networkId Int
  network   Network @relation(fields: [networkId], references: [id])
  show      Show    @relation(fields: [showId], references: [id])

  @@id([showId, networkId])
}

model ShowReview {
  id                  Int                   @id @default(autoincrement())
  content             String
  userId              String
  showId              Int
  startedOn           DateTime?
  endedOn             DateTime?
  spoiler             Boolean               @default(false)
  createdAt           DateTime              @default(now())
  likes               Like[]
  comments            ReviewComment[]
  show                Show                  @relation(fields: [showId], references: [id])
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  favouriteCharacters ShowReviewCharacter[]
  tags                ShowReviewTag[]
}

model SeasonReview {
  id                  Int                     @id @default(autoincrement())
  content             String
  userId              String
  seasonId            Int
  startedOn           DateTime?
  endedOn             DateTime?
  spoiler             Boolean                 @default(false)
  createdAt           DateTime                @default(now())
  likes               Like[]
  comments            ReviewComment[]
  season              Season                  @relation(fields: [seasonId], references: [id])
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  favouriteCharacters SeasonReviewCharacter[]
  tags                SeasonReviewTag[]
}

model EpisodeReview {
  id                  Int                      @id @default(autoincrement())
  content             String
  userId              String
  episodeId           Int
  watchedOn           DateTime?
  spoiler             Boolean                  @default(false)
  createdAt           DateTime                 @default(now())
  episode             Episode                  @relation(fields: [episodeId], references: [id])
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tags                EpisodeReviewTag[]
  likes               Like[]
  comments            ReviewComment[]
}

model ShowReviewCharacter {
  id           Int        @id @default(autoincrement())
  showReviewId Int
  characterId  Int
  character    Character  @relation(fields: [characterId], references: [id])
  showReview   ShowReview @relation(fields: [showReviewId], references: [id])

  @@unique([showReviewId, characterId])
}

model SeasonReviewCharacter {
  id             Int          @id @default(autoincrement())
  seasonReviewId Int
  characterId    Int
  character      Character    @relation(fields: [characterId], references: [id])
  seasonReview   SeasonReview @relation(fields: [seasonReviewId], references: [id])

  @@unique([seasonReviewId, characterId])
}



model ShowReviewTag {
  id           Int        @id @default(autoincrement())
  showReviewId Int
  tagId        Int
  showReview   ShowReview @relation(fields: [showReviewId], references: [id])
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@unique([showReviewId, tagId])
}

model SeasonReviewTag {
  id             Int          @id @default(autoincrement())
  seasonReviewId Int
  tagId          Int
  seasonReview   SeasonReview @relation(fields: [seasonReviewId], references: [id])
  tag            Tag          @relation(fields: [tagId], references: [id])

  @@unique([seasonReviewId, tagId])
}

model EpisodeReviewTag {
  id              Int           @id @default(autoincrement())
  episodeReviewId Int
  tagId           Int
  episodeReview   EpisodeReview @relation(fields: [episodeReviewId], references: [id])
  tag             Tag           @relation(fields: [tagId], references: [id])

  @@unique([episodeReviewId, tagId])
}

model Like {
  id              Int            @id @default(autoincrement())
  userId          String
  predictionId    Int?
  showReviewId    Int?
  seasonReviewId  Int?
  episodeReviewId Int?
  watchListId     Int?
  discussionId    Int?
  createdAt       DateTime       @default(now())
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id])
  prediction      Prediction?    @relation(fields: [predictionId], references: [id])
  seasonReview    SeasonReview?  @relation(fields: [seasonReviewId], references: [id])
  showReview      ShowReview?    @relation(fields: [showReviewId], references: [id])
  watchList       WatchList?     @relation(fields: [watchListId], references: [id])
  discussion      Discussion?    @relation(fields: [discussionId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, predictionId])
  @@unique([userId, showReviewId])
  @@unique([userId, seasonReviewId])
  @@unique([userId, episodeReviewId])
  @@unique([userId, watchListId])
  @@unique([userId, discussionId])
}

model ReviewComment {
  id              Int            @id @default(autoincrement())
  content         String
  userId          String
  showReviewId    Int?
  seasonReviewId  Int?
  episodeReviewId Int?
  createdAt       DateTime       @default(now())
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id])
  seasonReview    SeasonReview?  @relation(fields: [seasonReviewId], references: [id])
  showReview      ShowReview?    @relation(fields: [showReviewId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WatchList {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  userId      String
  isPublic    Boolean           @default(true)
  friendsOnly Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  shows       WatchListShow[]
  tags        WatchListTag[]
  comments    WatchListComment[]
  likes       Like[]

  @@index([userId])
  @@index([isPublic])
  @@index([friendsOnly])
}

model WatchListShow {
  id          Int       @id @default(autoincrement())
  watchListId Int
  showId      Int
  ranking     Int?
  note        String?
  spoiler     Boolean   @default(false)
  addedAt     DateTime  @default(now())
  watchList   WatchList @relation(fields: [watchListId], references: [id], onDelete: Cascade)
  show        Show      @relation(fields: [showId], references: [id])
  muchWatchSeasons WatchListShowSeason[]

  @@unique([watchListId, showId])
  @@index([watchListId, ranking])
}

model WatchListTag {
  id          Int       @id @default(autoincrement())
  watchListId Int
  tagId       Int
  watchList   WatchList @relation(fields: [watchListId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@unique([watchListId, tagId])
}

model WatchListComment {
  id          Int       @id @default(autoincrement())
  content     String
  userId      String
  watchListId Int
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  watchList   WatchList @relation(fields: [watchListId], references: [id], onDelete: Cascade)

  @@index([watchListId])
}

model WatchListShowSeason {
  id              Int           @id @default(autoincrement())
  watchListShowId Int
  seasonId        Int
  watchListShow   WatchListShow @relation(fields: [watchListShowId], references: [id], onDelete: Cascade)
  season          Season        @relation(fields: [seasonId], references: [id])

  @@unique([watchListShowId, seasonId])
}

model Discussion {
  id          Int               @id @default(autoincrement())
  title       String
  content     String
  userId      String
  showId      Int?
  seasonId    Int?
  episodeId   Int?
  spoiler     Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  show        Show?             @relation(fields: [showId], references: [id])
  season      Season?           @relation(fields: [seasonId], references: [id])
  episode     Episode?          @relation(fields: [episodeId], references: [id])
  comments    DiscussionComment[]
  tags        DiscussionTag[]
  likes       Like[]
  polls       Poll[]

  @@index([userId])
  @@index([showId])
  @@index([seasonId])
  @@index([episodeId])
  @@index([createdAt])
}

model DiscussionComment {
  id           Int                     @id @default(autoincrement())
  content      String
  userId       String
  discussionId Int
  parentId     Int?
  depth        Int                     @default(0)
  path         String                  // Materialized path for ordering (e.g., "000001.000123.000456")
  spoiler      Boolean                 @default(false)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussion   Discussion              @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  parent       DiscussionComment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      DiscussionComment[]     @relation("CommentReplies")
  reactions    Reaction[]
  votes        DiscussionCommentVote[]

  @@index([discussionId])
  @@index([userId])
  @@index([parentId])
  @@index([depth])
  @@index([path])
  @@index([discussionId, path])
  @@index([discussionId, createdAt])
}

model DiscussionCommentVote {
  id                  Int               @id @default(autoincrement())
  discussionCommentId Int
  userId              String
  value               VoteValue         // 1 = upvote, -1 = downvote
  createdAt           DateTime          @default(now())
  discussionComment   DiscussionComment @relation(fields: [discussionCommentId], references: [id], onDelete: Cascade)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([discussionCommentId, userId])
  @@index([discussionCommentId])
  @@index([userId])
}

enum VoteValue {
  DOWNVOTE @map("-1")
  UPVOTE   @map("1")
}

model DiscussionTag {
  id           Int        @id @default(autoincrement())
  discussionId Int
  tagId        Int
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@unique([discussionId, tagId])
}

model ReactionType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  emoji       String?    // Optional emoji representation
  category    String?    // "positive", "negative", "emotional", "reality-tv"
  createdAt   DateTime   @default(now())
  reactions   Reaction[]

  @@index([name])
  @@index([category])
}

model Reaction {
  id                  Int               @id @default(autoincrement())
  userId              String
  reactionTypeId      Int
  discussionCommentId Int?
  episodeId           Int?
  createdAt           DateTime          @default(now())
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactionType        ReactionType      @relation(fields: [reactionTypeId], references: [id], onDelete: Cascade)
  discussionComment   DiscussionComment? @relation(fields: [discussionCommentId], references: [id], onDelete: Cascade)
  episode             Episode?          @relation(fields: [episodeId], references: [id])

  @@unique([userId, discussionCommentId])
  @@unique([userId, episodeId])
  @@index([userId])
  @@index([reactionTypeId])
  @@index([discussionCommentId])
  @@index([episodeId])
}

model Poll {
  id           Int        @id @default(autoincrement())
  question     String
  discussionId Int
  closesAt     DateTime?
  createdAt    DateTime   @default(now())
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  options      PollOption[]

  @@index([discussionId])
}

model PollOption {
  id      Int       @id @default(autoincrement())
  text    String
  pollId  Int
  poll    Poll      @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes   PollVote[]

  @@index([pollId])
}

model PollVote {
  id           Int        @id @default(autoincrement())
  userId       String
  pollOptionId Int
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  @@unique([userId, pollOptionId])
  @@index([userId])
  @@index([pollOptionId])
}
