// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// TMDB Image generation: https://image.tmdb.org/t/p/w500/jJXV3H1SAvQpjSTIKZBUyAGica3.jpg

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id // Clerk ID
  username       String        @unique
  email          String        @unique
  profilePicture String?       @default("/noAvatar.png")
  bio            String?
  twitter        String?
  instagram      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  comments       Comment[]
  commentVotes   CommentVote[]
  predictions    Prediction[]
  reviews        Review[]
  showReviews    ShowReview[]
  seasonReviews  SeasonReview[]
  episodeReviews EpisodeReview[]
  favorites      Favorite[]
  views          View[]
  likes          Like[]
  reviewComments ReviewComment[]

  @@index([username])
  @@index([email])
  Rating Rating[]
}

model Show {
  id               Int          @id @default(autoincrement())
  tmdbId           Int          @unique
  name             String
  overview         String?
  firstAirDate     DateTime?
  originCountry    String[]
  originalLanguage String[]
  isCompetition    Boolean      @default(false)
  isRunning        Boolean      @default(false)
  tagline          String?
  tmdbRating       Float?
  ShowsOnNetworks ShowsOnNetworks[]
  posterPath       String?
  backdropPath     String?
  creator          ShowCreator[]
  tags             ShowTag[]
  seasons          Season[]
  comments         Comment[]
  reviews          Review[]
  showReviews      ShowReview[]
  predictions      Prediction[]
  favorites        Favorite[]
  views            View[]
  ratings          Rating[]
}

model Season {
  id           Int         @id @default(autoincrement())
  seasonNumber Int
  episodeCount Int
  overview     String?
  airDate      DateTime?
  posterPath   String?
  showId       Int
  show         Show        @relation(fields: [showId], references: [id])
  tmdbRating   Float?
  tags         SeasonTag[]
  episodes     Episode[]
  characters   Character[]
  comments     Comment[]
  reviews      Review[]
  seasonReviews SeasonReview[]
  favorites    Favorite[]
  views        View[]
  ratings      Rating[]

  @@unique([showId, seasonNumber])
}

model Episode {
  id            Int          @id @default(autoincrement())
  seasonId      Int
  season        Season       @relation(fields: [seasonId], references: [id])
  episodeNumber Int
  name          String
  overview      String?
  tmdbRating    Float?
  airDate       DateTime?
  stillPath     String?
  tags          EpisodeTag[]
  comments      Comment[]
  reviews       Review[]
  episodeReviews EpisodeReview[]
  predictions   Prediction[]
  favorites     Favorite[]
  views         View[]
  ratings       Rating[]

  @@unique([seasonId, episodeNumber])
}

model Person {
  id            Int            @id
  name          String
  profilePath   String?
  characters    Character[]
}

model Character {
  id            Int            @id @default(autoincrement())
  seasonId      Int
  personId      Int
  showRole      String?
  season        Season         @relation(fields: [seasonId], references: [id])
  person        Person         @relation(fields: [personId], references: [id])

  comments      Comment[]
  predictions   Prediction[]
  favorites     Favorite[]
  views         View[]
  tags          CharacterTag[]
  showReviews   ShowReviewCharacter[]
  seasonReviews SeasonReviewCharacter[]
  episodeReviews EpisodeReviewCharacter[]
}


model Creator {
  id        Int      @id
  name      String
  originalName String @map("original_name")
  profilePath String? @map("profile_path")
  shows     ShowCreator[]
}

model ShowCreator {
  showId    Int
  creatorId Int
  show      Show    @relation(fields: [showId], references: [id])
  creator   Creator @relation(fields: [creatorId], references: [id])

  @@id([showId, creatorId])
}

model Comment {
  id          Int        @id @default(autoincrement())
  content     String
  spoiler     Boolean    @default(false)
  userId      String
  user        User       @relation(fields: [userId], references: [id])

  showId      Int?
  show        Show?      @relation(fields: [showId], references: [id])

  seasonId    Int?
  season      Season?    @relation(fields: [seasonId], references: [id])

  episodeId   Int?
  episode     Episode?   @relation(fields: [episodeId], references: [id])

  characterId Int?
  character   Character? @relation(fields: [characterId], references: [id])

  parentId    Int?
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]  @relation("CommentReplies")

  votes       CommentVote[]
  likes       Like[]

  createdAt   DateTime   @default(now())
}


model CommentVote {
  id        Int     @id @default(autoincrement())
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  value     Int // 1 for upvote, -1 for downvote

  @@unique([commentId, userId]) // Prevent multiple votes per user
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Float // out of 5, allows quarter stars (e.g., 4.25)
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  showId    Int?
  show      Show?    @relation(fields: [showId], references: [id])
  seasonId  Int?
  season    Season?  @relation(fields: [seasonId], references: [id])
  episodeId Int?
  episode   Episode? @relation(fields: [episodeId], references: [id])
  spoiler   Boolean  @default(false)
  views     View[]
  likes     Like[]
  createdAt DateTime @default(now())
}

model Rating {
  id          Int       @id @default(autoincrement())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  rating      Float     // Rating value (0.5 - 5.0 in 0.5 increments)
  
  // Polymorphic relations
  showId      Int?
  show        Show?     @relation(fields: [showId], references: [id])
  
  seasonId    Int?
  season      Season?   @relation(fields: [seasonId], references: [id])
  
  episodeId   Int?
  episode     Episode?  @relation(fields: [episodeId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Ensure only one rating per user per entity
  @@unique([userId, showId])
  @@unique([userId, seasonId])
  @@unique([userId, episodeId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  showId    Int?
  show      Show?    @relation(fields: [showId], references: [id])
  seasonId  Int?
  season    Season?  @relation(fields: [seasonId], references: [id])
  episodeId Int?
  episode   Episode? @relation(fields: [episodeId], references: [id])
  characterId Int?
  character   Character? @relation(fields: [characterId], references: [id])
  createdAt DateTime @default(now())
}

model Tag {
  id         Int            @id @default(autoincrement())
  name       String         @unique
  shows      ShowTag[]
  seasons    SeasonTag[]
  episodes   EpisodeTag[]
  characters CharacterTag[]
  showReviews ShowReviewTag[]
  seasonReviews SeasonReviewTag[]
  episodeReviews EpisodeReviewTag[]
}

model ShowTag {
  id     Int  @id @default(autoincrement())
  showId Int
  tagId  Int
  show   Show @relation(fields: [showId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@unique([showId, tagId])
}

model SeasonTag {
  id       Int    @id @default(autoincrement())
  seasonId Int
  tagId    Int
  season   Season @relation(fields: [seasonId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@unique([seasonId, tagId])
}

model EpisodeTag {
  id        Int     @id @default(autoincrement())
  episodeId Int
  tagId     Int
  episode   Episode @relation(fields: [episodeId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@unique([episodeId, tagId])
}

model CharacterTag {
  id          Int       @id @default(autoincrement())
  characterId Int
  tagId       Int
  character   Character @relation(fields: [characterId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@unique([characterId, tagId])
}

model View {
  id          Int        @id @default(autoincrement())
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])

  showId      Int?
  show        Show?      @relation(fields: [showId], references: [id])

  seasonId    Int?
  season      Season?    @relation(fields: [seasonId], references: [id])

  episodeId   Int?
  episode     Episode?   @relation(fields: [episodeId], references: [id])

  reviewId    Int?
  review      Review?    @relation(fields: [reviewId], references: [id])

  showReviewId Int?
  showReview   ShowReview? @relation(fields: [showReviewId], references: [id])

  seasonReviewId Int?
  seasonReview   SeasonReview? @relation(fields: [seasonReviewId], references: [id])

  episodeReviewId Int?
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id])

  characterId Int?
  character   Character? @relation(fields: [characterId], references: [id])

  createdAt   DateTime   @default(now())

  @@index([userId])
  @@index([showId])
  @@index([seasonId])
  @@index([episodeId])
}


model Prediction {
  id             Int        @id @default(autoincrement())
  userId         String
  user           User       @relation(fields: [userId], references: [id])

  showId         Int
  show           Show       @relation(fields: [showId], references: [id])

  episodeId      Int
  episode        Episode    @relation(fields: [episodeId], references: [id])

  characterId    Int?
  character      Character? @relation(fields: [characterId], references: [id])

  predictionType String // e.g. "winner", "eliminated", etc.
  createdAt      DateTime   @default(now())
  likes          Like[]

  @@unique([userId, episodeId, predictionType])
}


model Network {
  id             Int       @id // TMDB network ID
  name           String
  homepage       String?
  logoPath       String?
  originCountry  String?
  ShowsOnNetworks ShowsOnNetworks[]
}

model ShowsOnNetworks {
  showId   Int
  networkId Int

  show     Show   @relation(fields: [showId], references: [id])
  network  Network @relation(fields: [networkId], references: [id])

  @@id([showId, networkId]) // Composite primary key
}

model ShowReview {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  showId    Int
  show      Show     @relation(fields: [showId], references: [id])
  startedOn DateTime?
  endedOn   DateTime?
  spoiler   Boolean  @default(false)
  views     View[]
  tags      ShowReviewTag[]
  favouriteCharacters ShowReviewCharacter[]
  likes     Like[]
  comments  ReviewComment[]
  createdAt DateTime @default(now())
}

model SeasonReview {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  seasonId  Int
  season    Season   @relation(fields: [seasonId], references: [id])
  startedOn DateTime?
  endedOn   DateTime?
  spoiler   Boolean  @default(false)
  views     View[]
  tags      SeasonReviewTag[]
  favouriteCharacters SeasonReviewCharacter[]
  likes     Like[]
  comments  ReviewComment[]
  createdAt DateTime @default(now())
}

model EpisodeReview {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  episodeId Int
  episode   Episode  @relation(fields: [episodeId], references: [id])
  watchedOn DateTime?
  spoiler   Boolean  @default(false)
  views     View[]
  tags      EpisodeReviewTag[]
  favouriteCharacters EpisodeReviewCharacter[]
  likes     Like[]
  comments  ReviewComment[]
  createdAt DateTime @default(now())
}

model ShowReviewCharacter {
  id           Int        @id @default(autoincrement())
  showReviewId Int
  characterId  Int
  showReview   ShowReview @relation(fields: [showReviewId], references: [id])
  character    Character  @relation(fields: [characterId], references: [id])

  @@unique([showReviewId, characterId])
}

model SeasonReviewCharacter {
  id             Int           @id @default(autoincrement())
  seasonReviewId Int
  characterId    Int
  seasonReview   SeasonReview  @relation(fields: [seasonReviewId], references: [id])
  character      Character     @relation(fields: [characterId], references: [id])

  @@unique([seasonReviewId, characterId])
}

model EpisodeReviewCharacter {
  id             Int           @id @default(autoincrement())
  episodeReviewId Int
  characterId    Int
  episodeReview  EpisodeReview @relation(fields: [episodeReviewId], references: [id])
  character      Character     @relation(fields: [characterId], references: [id])

  @@unique([episodeReviewId, characterId])
}

model ShowReviewTag {
  id           Int        @id @default(autoincrement())
  showReviewId Int
  tagId        Int
  showReview   ShowReview @relation(fields: [showReviewId], references: [id])
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@unique([showReviewId, tagId])
}

model SeasonReviewTag {
  id             Int           @id @default(autoincrement())
  seasonReviewId Int
  tagId          Int
  seasonReview   SeasonReview  @relation(fields: [seasonReviewId], references: [id])
  tag            Tag           @relation(fields: [tagId], references: [id])

  @@unique([seasonReviewId, tagId])
}

model EpisodeReviewTag {
  id             Int           @id @default(autoincrement())
  episodeReviewId Int
  tagId          Int
  episodeReview  EpisodeReview @relation(fields: [episodeReviewId], references: [id])
  tag            Tag           @relation(fields: [tagId], references: [id])

  @@unique([episodeReviewId, tagId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  // Polymorphic relations
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  
  reviewId  Int?
  review    Review?  @relation(fields: [reviewId], references: [id])
  
  predictionId Int?
  prediction   Prediction? @relation(fields: [predictionId], references: [id])
  
  showReviewId Int?
  showReview   ShowReview? @relation(fields: [showReviewId], references: [id])
  
  seasonReviewId Int?
  seasonReview   SeasonReview? @relation(fields: [seasonReviewId], references: [id])
  
  episodeReviewId Int?
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id])
  
  createdAt DateTime @default(now())

  // Ensure only one like per user per entity
  @@unique([userId, commentId])
  @@unique([userId, reviewId])
  @@unique([userId, predictionId])
  @@unique([userId, showReviewId])
  @@unique([userId, seasonReviewId])
  @@unique([userId, episodeReviewId])
}

model ReviewComment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  // Polymorphic relations to different review types
  showReviewId Int?
  showReview   ShowReview? @relation(fields: [showReviewId], references: [id])
  
  seasonReviewId Int?
  seasonReview   SeasonReview? @relation(fields: [seasonReviewId], references: [id])
  
  episodeReviewId Int?
  episodeReview   EpisodeReview? @relation(fields: [episodeReviewId], references: [id])
  
  createdAt DateTime @default(now())
}

